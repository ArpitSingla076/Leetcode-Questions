// +++ Push Efficient +++

class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();

    public MyQueue() {
        
    }
    
    public void push(int x) {
        s1.push(x);
    }
    
    public int pop() {
        while(s1.size()>1) {
            s2.push(s1.pop());
        }
        int val = s1.pop();
        while(s2.size()>0) {
            s1.push(s2.pop());
        }
        return val;
    }
    
    public int peek() {
          while(s1.size()>1) {
            s2.push(s1.pop());
        }
        int val = s1.peek();
        while(s2.size()>0) {
            s1.push(s2.pop());
        }
        return val;
    }
    
    public boolean empty() {
        if(s1.size()==0) return true;
        else return false;
    }
}

// -------------------------------------------------------------------------------------


// ++++ Pop Efficient +++

class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();

    public MyQueue() {

    }

    public void push(int x) {
        while (!s1.isEmpty()) {
            s2.push(s1.pop());
        }
        s1.push(x);

        while (!s2.isEmpty()) {
            s1.push(s2.pop());
        }
    }

    public int pop() {
        int val = s1.pop();
        return val;
    }

    public int peek() {
        int top = s1.peek();
        return top;
    }

    public boolean empty() {
        if (s1.isEmpty())
            return true;
        else
            return false;
    }   
}
