/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next;

        while (curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    public int pairSum(ListNode head) {

        ListNode slow = head;
        ListNode fast = head.next;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        int maxSum = Integer.MIN_VALUE;
        ListNode rev = reverse(slow.next);
        ListNode temp = head;
        ListNode temp2 = rev;

        while (temp2 != null) {
            if ((temp.val + temp2.val) > maxSum) {
                maxSum = temp.val + temp2.val;
            }
            temp = temp.next;
            temp2 = temp2.next;
        }
        return maxSum;
    }
}
